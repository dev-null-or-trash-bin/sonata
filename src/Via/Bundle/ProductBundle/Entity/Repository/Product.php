<?php

namespace Via\Bundle\ProductBundle\Entity\Repository;

use Symfony\Component\DependencyInjection\ContainerInterface;
use Symfony\Component\DependencyInjection\ContainerAwareInterface;

use Doctrine\ORM\EntityRepository;

#use Via\StoreBundle\Entity\Product;
/**
 * Product
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class Product extends EntityRepository implements ContainerAwareInterface
{
    
    /**
     * @var ContainerInterface
     */
    private $container;
    
    public function setContainer(ContainerInterface $container = null)
    {
        $this->container = $container;
    }
    
    public function findOneByIdJoinedToDescription($id)
    {   
        $queryBuilder = $this->createQueryBuilder('p');
        $queryBuilder->select('p, d, l')
        ->join('p.description', 'd')        
        ->join('d.local', 'l')
        ->where('p.id = :id')->setParameter('id', $id);
    
        /* print_r(array(
         'sql'        => $queryBuilder->getQuery()->getSQL(),
            'parameters' => $queryBuilder->getQuery()->getParameters(),
        )); */
        
        return $queryBuilder->getQuery()->getSingleResult();
        
          
    }
    
    /**
     * @param int $page
     * @param int $limit
     *
     * @return \Zend\Paginator\Paginator
     */
    public function findAllByLocalePaginated($locale, $page = 1, $limit = 10)
    {
        $queryBuilder = $this->createQueryBuilder('p');
        $queryBuilder->select('p, d, l')
            ->join('p.description', 'd')
            ->join('d.local', 'l')
            ->where('l.code = :code')->setParameter('code', $locale);
       
        $paginator  = $this->container->get('knp_paginator');
        $pagination = $paginator->paginate(
            $queryBuilder->getQuery(),
            $page/*page number*/,
            $limit/*limit per page*/
        );
    
        return $pagination;
    }
    
    public function findByLocale($locale)
    {
        $queryBuilder = $this->createQueryBuilder('p');
        $queryBuilder->select('p, d, l')  
                        ->join('p.description', 'd')                        
                        ->join('d.local', 'l')
                        ->where('l.code = :code')->setParameter('code', $locale);
        /* print_r(array(
        'sql'        => $queryBuilder->getQuery()->getSQL(),
        'parameters' => $queryBuilder->getQuery()->getParameters(),
        )); */
        return $queryBuilder->getQuery()->getResult();
    }
}
